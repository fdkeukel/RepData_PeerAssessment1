1+1
"arr,mate!"
6*7
data <- read.csv(unz("activity.zip", "activity.csv"))
data <- read.csv(unz("activity.zip", "activity.csv"))
ls
ls()
dir
dir()
setwd("C:/Users/fdekeukelaere/Dropbox/University/Coursera/Data Science/5. Reproducible Research/Peer Assesment 1/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"))
summary(data)
data
head(data)
str(data)
tapply(data$steps,data$date,sum)
tapply(data$steps,data$date,sum,na.rm=T )
sumday <- tapply(data$steps,data$date,sum,na.rm=T
sumday <- tapply(data$steps,data$date,sum,na.rm=T)
sumday <- tapply(data$steps,data$date,sum,na.rm=T)
str(sumday)
hist(sumday)
mean(sumday[1])
mean(sumday)
median(sumday)
data[complete.cases(data),]
data <- read.csv(unz("activity.zip", "activity.csv"))
data <- data[complete.cases(data),]
sumday <- tapply(data$steps,data$date,sum,na.rm=T)
hist(sumday)
mean(sumday)
str(data)
sumday <- tapply(data$steps,data$date,sum)
View(data)
data$steps
data$date
plot?
?
)
?plot
plot(data$interval,type = "l")
avgint<-tapply(data$steps,data$interval,average,na.rm=T)
avgint<-tapply(data$steps,data$interval,avg,na.rm=T)
avgint<-tapply(data$steps,data$interval,avg,na.rm=T)
avgint<-tapply(data$steps,data$interval,mean,na.rm=T)
meanint<-tapply(data$steps,data$interval,mean,na.rm=T)
str(meanint)
plot(meanint)
View(data)
View(data)
meanint
meanint<-tapply(data$steps,data$interval,mean,na.rm=T)
plot(meanint,xaxt="n")
axis(1,at=1:288,labels=names(meanint)
)
meanint<-tapply(data$steps,data$interval,mean,na.rm=T)
plot(meanint,xaxt="n")
axis(1,at=1:288,labels=names(meanint))
meanint
which.is.max(meanint)
which.max(meanint)
sort
sort(meanint)
which.max(meanint)
meanint("835")
meanint["835"]
which.max(meanint)[0]
label(which.max(meanint))
names(which.max(meanint))
names(which.max(meanint))[0]
names(which.max(meanint))[1]
names(which.max(meanint))
meanint<-tapply(data$steps,data$interval,mean,na.rm=T)
plot(meanint,xaxt="n" ,type = "l")
axis(1,at=1:length(meanint),labels=names(meanint))
length(meanint)
data <- read.csv(unz("activity.zip", "activity.csv"))
sum(!complete.cases(data))
complete.cases(data)
sum(complete.cases(datA))
sum(complete.cases(data))
filledData<-data
for(i in 1:ncol(filledData)){
filledData[is.na(filledData[,i]), i] <- mean(filledData[,i], na.rm = TRUE)
}
View(data)
View(data)
filledData[is.na(filledData[,1]), 1] <- mean(filledData[,1], na.rm = TRUE)
filledData[is.na(filledData[,1]), 2]
filledData[is.na(filledData[,1]), 3]
filledData[is.na(filledData[,1]), 2]
filledData[is.na(filledData[,1]), 1]
str(filledData[is.na(filledData[,1]), 1])
sum(filledData[is.na(filledData[,1]), 1])
is.na(filledData[,1])
filledData<-data
filledData[is.na(filledData[,1]), 1]
filledData[is.na(filledData[,1]), 2]
filledData[is.na(filledData[,1]), 3]
is.na(filledData[,1])
filledData[is.na(filledData[,1]), 3]
lapply(filledData,function(test) test[1])
lapply(filledData[1],function(test) test[1])
lapply(filledData[1],function(test) sum(test))
lapply(filledData[1],function(test) sum(test,na.rm=T))
lapply(filledData,function(test) if (is.nasum(test,na.rm=T))
)
lapply(filledData,function(test) test[1])
lapply(filledData[1],function(test) test[1])
lapply(filledData[1],function(test) test)
meanint<-tapply(data$steps,data$interval,mean,na.rm=T)
plot(meanint,xaxt="n" ,type = "l")
axis(1,at=1:length(meanint),labels=names(meanint))
lapply(filledData[1],function(test) meanint[test])
lapply(filledData,function(test) meanint[test])
lapply(filledData,function(test) test)
transform
?transform
transform(filledData, steps=ifelse(is.na(steps),0,steps))
head(transform(filledData, steps=ifelse(is.na(steps),0,steps)))
head(transform(filledData, steps=ifelse(is.na(steps),meanint(steps),steps)))
head(transform(filledData, steps=ifelse(is.na(steps),meanint[steps],steps)))
head(transform(filledData, steps=ifelse(is.na(steps),meanint[interval],steps)))
filledData<-transform(filledData, steps=ifelse(is.na(steps),meanint[interval],steps))
weekdays(filledData$date)
?weekdays
filledData$date <- as.Date(filledData$date)
filledData$date <- as.Date(filledData$date)
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
filledData$wDay <-  factor((weekdays(filledData$date) %in% weekdays1)+1L,levels=1:2, labels=c('weekend', 'weekday'))
library(lattice)
xyplot(weekend~weekday, data=filledData,layout=c(1,2))
meanint<-tapply(filledData$steps, factor(filledData$wDay,filledData$date))
meanint<-tapply(filledData$steps, factor(filledData$wDay,filledData$date).sum)
meanint<-tapply(filledData$steps, factor(filledData$wDay,filledData$date),sum)
meanint<-tapply(filledData$steps, factor(filledData$wDay,filledData$date),mean)
meanint<-tapply(filledData$steps, filledData$wDay,filledData$date,mean)
meanint<-tapply(filledData$steps, filledData$wDay~filledData$date,mean)
meanint<-tapply(filledData$steps, c(filledData$wDay,filledData$date),mean)
meanint<-tapply(filledData$steps, list(filledData$wDay,filledData$date),mean)
meanint<-tapply(filledData$steps, list(filledData$wDay,filledData$date),mean.na.rm=T)
meanint
meanint<-tapply(filledData$steps, list(filledData$wDay,filledData$date),mean.na.rm=T)
aggregate(filledData,by=list(wDay,data), mean,na.rm=T)
aggregate(filledData,by=list(wDay,date), mean,na.rm=T)
?attach
aggregate(filledData,by=list(filledData$wDay,filledData$date), mean,na.rm=T)
aggregate(filledData,by=list(filledData$wDay,filledData$interval), mean,na.rm=T)
warnings()
aggregate(filledData[1],by=list(filledData$wDay,filledData$interval), mean,na.rm=T)
aggregate(filledData[1],by=list(filledData$wDay,filledData$interval), mean,na.rm=T)
sumdata<-aggregate(filledData[1],by=list(filledData$wDay,filledData$interval), mean,na.rm=T)
data_t=data.table(filledData)
library(data.table)
data_t=data.table(filledData)
library(data.table)
install.packages("data.table")
DT <- data.table(data)
library(data.table)
DT <- data.table(data)
DT
DT[sum(steps),by=list(date)]
DT[sum,by=list(date)]
DT[sum(steps),by="date"]
DT[sum(steps),by=date]
DT[,by=date]
DT[,by="date"]
DT[sum,by="date"]
DT[date]
DT[,date]
DT[,.(steps,date)]
DT[,sum(steps),by=date]
DT[,sum(steps),by=date, na.rm=TRUE]
DT[,sum(steps),by=date, na.rm=True]
DT[,sum(steps),by=date, na.rm=T]
DT[,sum(steps, na.rm=TRUE),by=date, na.rm=T]
DT[,sum(steps, na.rm=TRUE),by=date]
DT[,sum(steps, na.rm=T),by=date]
sumday<-DT[,sum(steps, na.rm=T),by=date]
hist(sumday,  main = "Histogram", xlab = "Number of Steps")
library(data.table)
#load the data from the zip file
data <- read.csv(unz("activity.zip", "activity.csv"))
#convert the data.frame to a data.table for easy manipulation
DT <- data.table(data)
sumday <- tapply(data$steps,data$date,sum,na.rm=T)
sumday2<- DT[,sum(steps, na.rm=T),by=date]
sum_by_day<- DT[,sum(steps, na.rm=T),by=date]
hist(sum_by_day[2],  main = "Histogram", xlab = "Number of Steps")
sum_by_day[2]
sum_by_day[,2]
sum_by_day[,1]
sum_by_day
sum_by_day[steps]
sum_by_day[.steps]
sum_by_day[.(steps)]
sum_by_day[,.(steps)]
sum_by_day[,steps]
sum_by_day[,V1]
sum_by_day<- DT[,sum_steps=sum(steps, na.rm=T),by=date]
sum_by_day<- DT[,sum_steps=sum(steps, na.rm=T),by=date]
sum_by_day<- DT[,sum_steps:=sum(steps, na.rm=T),by=date]
sum_by_day<- DT[,sum(steps, na.rm=T),by=date]
sum_by_day<- DT[,list(sum_by_date=sum(steps, na.rm=T)),by=date]
DT_by_date<- DT[,list(sum_by_date=sum(steps, na.rm=T)),by=date]
library(data.table)
#load the data from the zip file
data <- read.csv(unz("activity.zip", "activity.csv"))
#convert the data.frame to a data.table for easy manipulation
DT <- data.table(data)
DT_by_date<- DT[,list(sum_by_date=sum(steps, na.rm=T)),by=date]
hist(DT_by_date[sum_by_date],  main = "Histogram", xlab = "Number of Steps")
hist(DT_by_date[,sum_by_date],  main = "Histogram", xlab = "Number of Steps")
mean(DT_by_date[,sum_by_date])
median(DT_by_date[,sum_by_date])
DT_by_interval <- DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval]
plot(DT_by_interval,xaxt="n" ,type = "l", xlab="Interval", ylab="Average Number Of Steps")
plot(DT_by_interval,xaxt="n" ,type = "l", xlab="Interval", ylab="Average Number Of Steps")
axis(1,at=1:length(meanint),labels=names(meanint))
DT_by_interval <- DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval]
plot(DT_by_interval,xaxt="n" ,type = "l", xlab="Interval", ylab="Average Number Of Steps")
axis(1,at=1:length(DT_by_interval),labels=names(DT_by_interval))
DT_by_interval <- DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval]
plot(DT_by_interval,xaxt="n" ,type = "l", xlab="Interval", ylab="Average Number Of Steps")
axis(1,at=1:length(DT_by_interval),labels=DT_by_interval[],interval])
DT_by_interval <- DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval]
plot(DT_by_interval,xaxt="n" ,type = "l", xlab="Interval", ylab="Average Number Of Steps")
axis(1,at=1:length(DT_by_interval),labels=DT_by_interval[,interval])
axis(1,at=1:length(DT_by_interval),labels=DT_by_interval[],interval])
axis(1,at=1:length(DT_by_interval),labels=DT_by_interval[,interval])
DT_by_interval <- DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval]
plot(DT_by_interval,xaxt="n" ,type = "l", xlab="Interval", ylab="Average Number Of Steps")
DT_by_interval <- DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval]
plot(DT_by_interval,type = "l", xlab="Interval", ylab="Average Number Of Steps")
View(DT_by_interval)
View(DT)
dt
DT
DT_by_interval <- DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval]
plot(DT_by_interval,type = "l", xlab="Interval", ylab="Average Number Of Steps")
which.max(DT_by_interval)
which.max(DT_by_interval[,steps])
which.max(DT_by_interval[,avg_by_interval])
DT_by_interval[which.max(DT_by_interval[,avg_by_interval]),interval]
DT_by_interval[which.max(DT_by_interval[,avg_by_interval]),interval]
sum(!complete.cases(data))
sum(!complete.cases(DT))
setkey(DT_by_interval, interval)
setkey(DT, interval)
DT[DT_by_interval]
DT[DT_by_interval,Fix=ifelse(is.na(steps),avg_by_interval,steps)]
DT[DT_by_interval,list(date,interval,Fix=ifelse(is.na(steps),avg_by_interval,steps))]
DT[DT_by_interval,list(date,interval,step, fixedStep=ifelse(is.na(steps),avg_by_interval,steps))]
DT[DT_by_interval,list(date,interval, step, fixedStep=ifelse(is.na(steps),avg_by_interval,steps))]
DT[DT_by_interval,list(date,interval,fixedStep=ifelse(is.na(steps),avg_by_interval,steps))]
DT[DT_by_interval,list(date,interval,steps,fixedStep=ifelse(is.na(steps),avg_by_interval,steps))]
DT[DT_by_interval,list(date,interval,steps=ifelse(is.na(steps),avg_by_interval,steps))]
filled_DT<-DT[DT_by_interval,list(date,interval,steps=ifelse(is.na(steps),avg_by_interval,steps))]
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T)),by=date]
hist(DT_by_date[,sum_by_date],  main = "Histogram", xlab = "Number of Steps")
mean(DT_by_date[,sum_by_date])
median(DT_by_date[,sum_by_date])
DT_by_date <- filled_DT[,list(sum_by_date=sum(steps, na.rm=T)),by=date]
hist(DT_by_date[,sum_by_date],  main = "Histogram", xlab = "Number of Steps")
mean(DT_by_date[,sum_by_date])
median(DT_by_date[,sum_by_date])
View(filled_DT)
View(filled_DT)
View(DT)
View(DT)
View(DT_by_interval)
DT_by_date <- filled_DT[,list(sum_by_date=sum(steps)),by=date]
View(DT_by_date)
DT_by_date <- filled_DT[,list(sum_by_date=sum(steps)),by=date]
hist(DT_by_date[,sum_by_date],  main = "Histogram", xlab = "Number of Steps")
mean(DT_by_date[,sum_by_date])
median(DT_by_date[,sum_by_date])
filled_DT$date <- as.Date(filled_DT$date)
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
filled_DT$date <- as.Date(filled_DT$date)
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
filled_DT$weekDay <-  factor((weekdays(filledData$date) %in% weekdays1)+1L,levels=1:2, labels=c('weekend', 'weekday'))
filled_DT$date <- as.Date(filled_DT$date)
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
filled_DT$weekDay <-  factor((weekdays(filled_DT$date) %in% weekdays1)+1L,levels=1:2, labels=c('weekend', 'weekday'))
filled_DT[,weekdays(date)]
str(filled_DT[,weekdays(date)])
filled_DT[,weekdays(date) %in% weekdays1]
filled_DT[,weekdays(date) %in% weekdays1]+1L
View(filled_DT)
filled_DT[,weekDay]
filled_DT[,.indexwday(date) %in% 1:5]]
filled_DT[,.indexwday(date) %in% 1:5]
?indexwday
??indexwday
library(xts)
install.packages("xts")
?indexwday
x <-  sample.xts['2007']
Sys.setlocale("LC_TIME","English United States")
filled_DT$date <- as.Date(filled_DT$date)
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
filled_DT$weekDay <-  factor((weekdays(filled_DT$date) %in% weekdays1)+1L,levels=1:2, labels=c('weekend', 'weekday'))
View(filled_DT)
Sys.setlocale("LC_TIME", "en_US")
Sys.setlocale("LC_TIME","English")
filled_DT$date <- as.Date(filled_DT$date)
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
filled_DT$weekDay <-  factor((weekdays(filled_DT$date) %in% weekdays1)+1L,levels=1:2, labels=c('weekend', 'weekday'))
View(filled_DT)
filled_DT[,weekdays(date) %in% weekdays1]+1L
filled_DT[,weekdays(date) %in% weekdays1]
filled_DT[,weekdays(date) %in% weekdays1]+1L
Sys.setlocale("LC_TIME","English")
filled_DT$date <- as.Date(filled_DT$date)
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
filled_DT$weekday <-  factor((weekdays(filled_DT$date) %in% weekdays1)+1L,levels=1:2, labels=c('weekend', 'weekday'))
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval,weekday]
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval,weekday]
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps),by=interval,weekday]
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps),by=list(interval,weekday)]
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps),by=weekday]
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps)),by=weekday]
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps)),by=weekday,interval]
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps)),keyby=weekday,interval]
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps)),by=(weekday,interval)]
filled_DT
library(data.table)
#load the data from the zip file
data <- read.csv(unz("activity.zip", "activity.csv"))
#convert the data.frame to a data.table for easy manipulation
DT <- data.table(data)
setkey(DT, interval)
setkey(DT_by_interval, interval)
filled_DT<-DT[DT_by_interval,list(date,interval,steps=ifelse(is.na(steps),avg_by_interval,steps))]
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
library(data.table)
#load the data from the zip file
data <- read.csv(unz("activity.zip", "activity.csv"))
#convert the data.frame to a data.table for easy manipulation
DT <- data.table(data)
```
## What is mean total number of steps taken per day?
1. Calculate the total number of steps taken per day
```{r}
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T)),by=date]
```
2. If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
```{r}
hist(DT_by_date[,sum_by_date],  main = "Histogram", xlab = "Number of Steps")
```
3. Calculate and report the mean and median of the total number of steps taken per day
```{r}
mean(DT_by_date[,sum_by_date])
median(DT_by_date[,sum_by_date])
```
## What is the average daily activity pattern?
1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r}
DT_by_interval <- DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval]
plot(DT_by_interval,type = "l", xlab="Interval", ylab="Average Number Of Steps")
```
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
DT_by_interval[which.max(DT_by_interval[,avg_by_interval]),interval]
```
The 5-minute interval with the highest average across all the days in the dataset is `r DT_by_interval[which.max(DT_by_interval[,avg_by_interval]),interval]`.
## Imputing missing values
1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
sum(!complete.cases(DT))
```
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
My strategy is to replace the NA values by the mean of the value for that 5 minute interval.
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
setkey(DT, interval)
setkey(DT_by_interval, interval)
filled_DT<-DT[DT_by_interval,list(date,interval,steps=ifelse(is.na(steps),avg_by_interval,steps))]
```
4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day.
```{r}
DT_by_date <- filled_DT[,list(sum_by_date=sum(steps)),by=date]
hist(DT_by_date[,sum_by_date],  main = "Histogram", xlab = "Number of Steps")
mean(DT_by_date[,sum_by_date])
median(DT_by_date[,sum_by_date])
```
*Do these values differ from the estimates from the first part of the assignment?*
Yes both of them differ.
*What is the impact of imputing missing data on the estimates of the total daily number of steps?*
By imputing using the mean value for the interval, the histogram becomes more nicely distributed. It is no longer skewed towards 0.
## Are there differences in activity patterns between weekdays and weekends?
1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
```{r}
# Needed for the weekday code
Sys.setlocale("LC_TIME","English")
filled_DT$date <- as.Date(filled_DT$date)
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
filled_DT$weekday <-  factor((weekdays(filled_DT$date) %in% weekdays1)+1L,levels=1:2, labels=c('weekend', 'weekday'))
```
2. Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
```{r}
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval,weekday]
#library(lattice)
#xyplot(weekend~weekday, data=filledData,layout=c(1,2))
```
View(filled_DT)
filled_DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=interval,weekday]
DT_by_date <- DT[,sum_by_date:=sum(steps, na.rm=T),by=date]
View(DT_by_date)
filled_DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=list(interval,weekday)]
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=list(interval,weekday)]
View(DT_by_weekday_by_interval)
DT_by_weekday_by_interval <- filled_DT[,list(avg_by_interval=mean(steps, na.rm=T)),by=list(weekday,interval)]
View(DT_by_weekday_by_interval)
library(lattice)
xyplot(avg_by_interval~interval | weekday, data=DT_by_weekday_by_interval,layout=c(1,2))
xyplot(avg_by_interval~interval | weekday, data=DT_by_weekday_by_interval,layout=c(1,2), type = "l")
xyplot(avg_by_interval~interval | weekday, data=DT_by_weekday_by_interval,layout=c(1,2), type = "l", ylab = "Average Number of Steps")
View(DT_by_date)
View(DT_by_date)
DT_by_date <- DT[,list(date,sum_by_date=sum(steps, na.rm=T)),by=date]
View(DT_by_date)
View(DT_by_date)
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T)),by=date]
View(DT_by_date)
DT_by_date <- DT[,sum_by_date:=sum(steps, na.rm=T)),by=date]
View(DT_by_date)
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T),mean_by_date=mean(steps, na.rm=T), median_by_date=median(steps, na.rm=T) ),by=date]
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T),mean_by_date=mean(steps, na.rm=T), median_by_date=median(steps, na.rm=T) ),by=date]
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T)),by=date]
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T),mean_by_date=mean(steps, na.rm=T)),by=date]
View(DT_by_date)
View(DT_by_date)
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T),mean_by_date=mean(steps, na.rm=T),median_by_date=mean(steps, na.rm=T)),by=date]
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T),mean_by_date=mean(steps, na.rm=T),median_by_date=median(steps, na.rm=T)),by=date]
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T),mean_by_date=mean(steps, na.rm=T)),by=date]
View(DT_by_date)
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T),mean_by_date=mean(steps, na.rm=T),median_by_date=as.double(median(steps, na.rm=T))),by=date]
View(DT_by_date)
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T),mean_by_date=mean(steps, na.rm=T),median_by_date=median(as.double(steps), na.rm=T)),by=date]
View(DT_by_date)
DT_by_date <- DT[,list(median_by_date=median(as.double(steps), na.rm=T)),by=date]
View(DT_by_date)
DT[date="2012-10-07",]
DT_by_date <- DT[date="2012-10-07", date]
DT_by_date <- DT[date>"2012-10-07", date]
View(DT)
View(DT)
DT
DT[interval=0,]
DT[DT.interval=0,]
DT[DT$interval=0,]
DT[interval==0,]
DT[date=="2012-10-07", ]
test<-DT[date=="2012-10-07", ]
View(test)
DT_by_date <- DT[,list(sum_by_date=sum(steps, na.rm=T),mean_by_date=mean(steps, na.rm=T), median_by_date=as.double(median(steps, na.rm=T))),by=date]
View(DT_by_date)
hist(DT_by_date[,sum_by_date],  main = "Histogram", xlab = "Number of Steps")
DT_by_date <- DT[,list(mean_by_date=mean(steps, na.rm=T), median_by_date=as.double(median(steps, na.rm=T))),by=date]
DT_by_date
